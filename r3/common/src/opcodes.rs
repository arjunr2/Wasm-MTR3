//! Enumified bindgen output on `wasm-instrument`'s
//! [`wasmops.h`](https://github.com/arjunr2/wasm-instrument/blob/main/wasmops.h)

/// A list of all opcodes currently supported
#[derive(Debug)]
pub enum WasmOpcode {
    Unreachable = 0,
    Nop = 1,
    Block = 2,
    Loop = 3,
    If = 4,
    Else = 5,
    End = 11,
    Br = 12,
    BrIf = 13,
    BrTable = 14,
    Return = 15,
    Call = 16,
    CallIndirect = 17,
    Drop = 26,
    Select = 27,
    LocalGet = 32,
    LocalSet = 33,
    LocalTee = 34,
    GlobalGet = 35,
    GlobalSet = 36,
    I32Load = 40,
    I64Load = 41,
    F32Load = 42,
    F64Load = 43,
    I32Load8S = 44,
    I32Load8U = 45,
    I32Load16S = 46,
    I32Load16U = 47,
    I64Load8S = 48,
    I64Load8U = 49,
    I64Load16S = 50,
    I64Load16U = 51,
    I64Load32S = 52,
    I64Load32U = 53,
    I32Store = 54,
    I64Store = 55,
    F32Store = 56,
    F64Store = 57,
    I32Store8 = 58,
    I32Store16 = 59,
    I64Store8 = 60,
    I64Store16 = 61,
    I64Store32 = 62,
    MemorySize = 63,
    MemoryGrow = 64,
    I32Const = 65,
    I64Const = 66,
    F32Const = 67,
    F64Const = 68,
    I32Eqz = 69,
    I32Eq = 70,
    I32Ne = 71,
    I32LtS = 72,
    I32LtU = 73,
    I32GtS = 74,
    I32GtU = 75,
    I32LeS = 76,
    I32LeU = 77,
    I32GeS = 78,
    I32GeU = 79,
    I64Eqz = 80,
    I64Eq = 81,
    I64Ne = 82,
    I64LtS = 83,
    I64LtU = 84,
    I64GtS = 85,
    I64GtU = 86,
    I64LeS = 87,
    I64LeU = 88,
    I64GeS = 89,
    I64GeU = 90,
    F32Eq = 91,
    F32Ne = 92,
    F32Lt = 93,
    F32Gt = 94,
    F32Le = 95,
    F32Ge = 96,
    F64Eq = 97,
    F64Ne = 98,
    F64Lt = 99,
    F64Gt = 100,
    F64Le = 101,
    F64Ge = 102,
    I32Clz = 103,
    I32Ctz = 104,
    I32Popcnt = 105,
    I32Add = 106,
    I32Sub = 107,
    I32Mul = 108,
    I32DivS = 109,
    I32DivU = 110,
    I32RemS = 111,
    I32RemU = 112,
    I32And = 113,
    I32Or = 114,
    I32Xor = 115,
    I32Shl = 116,
    I32ShrS = 117,
    I32ShrU = 118,
    I32Rotl = 119,
    I32Rotr = 120,
    I64Clz = 121,
    I64Ctz = 122,
    I64Popcnt = 123,
    I64Add = 124,
    I64Sub = 125,
    I64Mul = 126,
    I64DivS = 127,
    I64DivU = 128,
    I64RemS = 129,
    I64RemU = 130,
    I64And = 131,
    I64Or = 132,
    I64Xor = 133,
    I64Shl = 134,
    I64ShrS = 135,
    I64ShrU = 136,
    I64Rotl = 137,
    I64Rotr = 138,
    F32Abs = 139,
    F32Neg = 140,
    F32Ceil = 141,
    F32Floor = 142,
    F32Trunc = 143,
    F32Nearest = 144,
    F32Sqrt = 145,
    F32Add = 146,
    F32Sub = 147,
    F32Mul = 148,
    F32Div = 149,
    F32Min = 150,
    F32Max = 151,
    F32Copysign = 152,
    F64Abs = 153,
    F64Neg = 154,
    F64Ceil = 155,
    F64Floor = 156,
    F64Trunc = 157,
    F64Nearest = 158,
    F64Sqrt = 159,
    F64Add = 160,
    F64Sub = 161,
    F64Mul = 162,
    F64Div = 163,
    F64Min = 164,
    F64Max = 165,
    F64Copysign = 166,
    I32WrapI64 = 167,
    I32TruncF32S = 168,
    I32TruncF32U = 169,
    I32TruncF64S = 170,
    I32TruncF64U = 171,
    I64ExtendI32S = 172,
    I64ExtendI32U = 173,
    I64TruncF32S = 174,
    I64TruncF32U = 175,
    I64TruncF64S = 176,
    I64TruncF64U = 177,
    F32ConvertI32S = 178,
    F32ConvertI32U = 179,
    F32ConvertI64S = 180,
    F32ConvertI64U = 181,
    F32DemoteF64 = 182,
    F64ConvertI32S = 183,
    F64ConvertI32U = 184,
    F64ConvertI64S = 185,
    F64ConvertI64U = 186,
    F64PromoteF32 = 187,
    I32ReinterpretF32 = 188,
    I64ReinterpretF64 = 189,
    F32ReinterpretI32 = 190,
    F64ReinterpretI64 = 191,
    Try = 6,
    Catch = 7,
    Throw = 8,
    Rethrow = 9,
    ReturnCall = 18,
    ReturnCallIndirect = 19,
    CallRef = 20,
    ReturnCallRef = 21,
    Delegate = 24,
    CatchAll = 25,
    SelectT = 28,
    TableGet = 37,
    TableSet = 38,
    I32Extend8S = 192,
    I32Extend16S = 193,
    I64Extend8S = 194,
    I64Extend16S = 195,
    I64Extend32S = 196,
    RefNull = 208,
    RefIsNull = 209,
    RefFunc = 210,
    RefAsNonNull = 211,
    BrOnNull = 212,
    RefEq = 213,
    BrOnNonNull = 214,
    I32TruncSatF32S = 64512,
    I32TruncSatF32U = 64513,
    I32TruncSatF64S = 64514,
    I32TruncSatF64U = 64515,
    I64TruncSatF32S = 64516,
    I64TruncSatF32U = 64517,
    I64TruncSatF64S = 64518,
    I64TruncSatF64U = 64519,
    MemoryInit = 64520,
    DataDrop = 64521,
    MemoryCopy = 64522,
    MemoryFill = 64523,
    TableInit = 64524,
    ElemDrop = 64525,
    TableCopy = 64526,
    TableGrow = 64527,
    TableSize = 64528,
    TableFill = 64529,
    V128Load = 64768,
    V128Load8X8S = 64769,
    V128Load8X8U = 64770,
    V128Load16X4S = 64771,
    V128Load16X4U = 64772,
    V128Load32X2S = 64773,
    V128Load32X2U = 64774,
    V128Load8Splat = 64775,
    V128Load16Splat = 64776,
    V128Load32Splat = 64777,
    V128Load64Splat = 64778,
    V128Store = 64779,
    V128Const = 64780,
    I8X16Shuffle = 64781,
    I8X16Swizzle = 64782,
    I8X16Splat = 64783,
    I16X8Splat = 64784,
    I32X4Splat = 64785,
    I64X2Splat = 64786,
    F32X4Splat = 64787,
    F64X2Splat = 64788,
    I8X16ExtractLaneS = 64789,
    I8X16ExtractLaneU = 64790,
    I8X16ReplaceLane = 64791,
    I16X8ExtractLaneS = 64792,
    I16X8ExtractLaneU = 64793,
    I16X8ReplaceLane = 64794,
    I32X4ExtractLane = 64795,
    I32X4ReplaceLane = 64796,
    I64X2ExtractLane = 64797,
    I64X2ReplaceLane = 64798,
    F32X4ExtractLane = 64799,
    F32X4ReplaceLane = 64800,
    F64X2ExtractLane = 64801,
    F64X2ReplaceLane = 64802,
    I8X16Eq = 64803,
    I8X16Ne = 64804,
    I8X16LtS = 64805,
    I8X16LtU = 64806,
    I8X16GtS = 64807,
    I8X16GtU = 64808,
    I8X16LeS = 64809,
    I8X16LeU = 64810,
    I8X16GeS = 64811,
    I8X16GeU = 64812,
    I16X8Eq = 64813,
    I16X8Ne = 64814,
    I16X8LtS = 64815,
    I16X8LtU = 64816,
    I16X8GtS = 64817,
    I16X8GtU = 64818,
    I16X8LeS = 64819,
    I16X8LeU = 64820,
    I16X8GeS = 64821,
    I16X8GeU = 64822,
    I32X4Eq = 64823,
    I32X4Ne = 64824,
    I32X4LtS = 64825,
    I32X4LtU = 64826,
    I32X4GtS = 64827,
    I32X4GtU = 64828,
    I32X4LeS = 64829,
    I32X4LeU = 64830,
    I32X4GeS = 64831,
    I32X4GeU = 64832,
    F32X4Eq = 64833,
    F32X4Ne = 64834,
    F32X4Lt = 64835,
    F32X4Gt = 64836,
    F32X4Le = 64837,
    F32X4Ge = 64838,
    F64X2Eq = 64839,
    F64X2Ne = 64840,
    F64X2Lt = 64841,
    F64X2Gt = 64842,
    F64X2Le = 64843,
    F64X2Ge = 64844,
    V128Not = 64845,
    V128And = 64846,
    V128Andnot = 64847,
    V128Or = 64848,
    V128Xor = 64849,
    V128Bitselect = 64850,
    V128AnyTrue = 64851,
    V128Load8Lane = 64852,
    V128Load16Lane = 64853,
    V128Load32Lane = 64854,
    V128Load64Lane = 64855,
    V128Store8Lane = 64856,
    V128Store16Lane = 64857,
    V128Store32Lane = 64858,
    V128Store64Lane = 64859,
    V128Load32Zero = 64860,
    V128Load64Zero = 64861,
    F32X4DemoteF64X2Zero = 64862,
    F64X2PromoteF32X4 = 64863,
    I8X16Abs = 64864,
    I8X16Neg = 64865,
    I8X16Popcnt = 64866,
    I8X16AllTrue = 64867,
    I8X16Bitmask = 64868,
    I8X16NarrowI16X8S = 64869,
    I8X16NarrowI16X8U = 64870,
    F32X4Ceil = 64871,
    F32X4Floor = 64872,
    F32X4Trunc = 64873,
    F32X4Nearest = 64874,
    I8X16Shl = 64875,
    I8X16ShrS = 64876,
    I8X16ShrU = 64877,
    I8X16Add = 64878,
    I8X16AddSatS = 64879,
    I8X16AddSatU = 64880,
    I8X16Sub = 64881,
    I8X16SubSatS = 64882,
    I8X16SubSatU = 64883,
    F64X2Ceil = 64884,
    F64X2Floor = 64885,
    I8X16MinS = 64886,
    I8X16MinU = 64887,
    I8X16MaxS = 64888,
    I8X16MaxU = 64889,
    F64X2Trunc = 64890,
    I8X16AvgrU = 64891,
    I16X8ExtaddPairwiseI8X16S = 64892,
    I16X8ExtaddPairwiseI8X16U = 64893,
    I32X4ExtaddPairwiseI16X8S = 64894,
    I32X4ExtaddPairwiseI16X8U = 64895,
    I16X8Abs = 16613377,
    I16X8Neg = 16613633,
    I16X8Q15mulrSatS = 16613889,
    I16X8AllTrue = 16614145,
    I16X8Bitmask = 16614401,
    I16X8NarrowI32X4S = 16614657,
    I16X8NarrowI32X4U = 16614913,
    I16X8ExtendLowI8X16S = 16615169,
    I16X8ExtendHighI8X16S = 16615425,
    I16X8ExtendLowI8X16U = 16615681,
    I16X8ExtendHighI8X16U = 16615937,
    I16X8Shl = 16616193,
    I16X8ShrS = 16616449,
    I16X8ShrU = 16616705,
    I16X8Add = 16616961,
    I16X8AddSatS = 16617217,
    I16X8AddSatU = 16617473,
    I16X8Sub = 16617729,
    I16X8SubSatS = 16617985,
    I16X8SubSatU = 16618241,
    F64X2Nearest = 16618497,
    I16X8Mul = 16618753,
    I16X8MinS = 16619009,
    I16X8MinU = 16619265,
    I16X8MaxS = 16619521,
    I16X8MaxU = 16619777,
    I16X8AvgrU = 16620289,
    I16X8ExtmulLowI8X16S = 16620545,
    I16X8ExtmulHighI8X16S = 16620801,
    I16X8ExtmulLowI8X16U = 16621057,
    I16X8ExtmulHighI8X16U = 16621313,
    I32X4Abs = 16621569,
    I32X4Neg = 16621825,
    I32X4AllTrue = 16622337,
    I32X4Bitmask = 16622593,
    I32X4ExtendLowI16X8S = 16623361,
    I32X4ExtendHighI16X8S = 16623617,
    I32X4ExtendLowI16X8U = 16623873,
    I32X4ExtendHighI16X8U = 16624129,
    I32X4Shl = 16624385,
    I32X4ShrS = 16624641,
    I32X4ShrU = 16624897,
    I32X4Add = 16625153,
    I32X4Sub = 16625921,
    I32X4Mul = 16626945,
    I32X4MinS = 16627201,
    I32X4MinU = 16627457,
    I32X4MaxS = 16627713,
    I32X4MaxU = 16627969,
    I32X4DotI16X8S = 16628225,
    I32X4ExtmulLowI16X8S = 16628737,
    I32X4ExtmulHighI16X8S = 16628993,
    I32X4ExtmulLowI16X8U = 16629249,
    I32X4ExtmulHighI16X8U = 16629505,
    I64X2Abs = 16629761,
    I64X2Neg = 16630017,
    I64X2AllTrue = 16630529,
    I64X2Bitmask = 16630785,
    I64X2ExtendLowI32X4S = 16631553,
    I64X2ExtendHighI32X4S = 16631809,
    I64X2ExtendLowI32X4U = 16632065,
    I64X2ExtendHighI32X4U = 16632321,
    I64X2Shl = 16632577,
    I64X2ShrS = 16632833,
    I64X2ShrU = 16633089,
    I64X2Add = 16633345,
    I64X2Sub = 16634113,
    I64X2Mul = 16635137,
    I64X2Eq = 16635393,
    I64X2Ne = 16635649,
    I64X2LtS = 16635905,
    I64X2GtS = 16636161,
    I64X2LeS = 16636417,
    I64X2GeS = 16636673,
    I64X2ExtmulLowI32X4S = 16636929,
    I64X2ExtmulHighI32X4S = 16637185,
    I64X2ExtmulLowI32X4U = 16637441,
    I64X2ExtmulHighI32X4U = 16637697,
    F32X4Abs = 16637953,
    F32X4Neg = 16638209,
    F32X4Sqrt = 16638721,
    F32X4Add = 16638977,
    F32X4Sub = 16639233,
    F32X4Mul = 16639489,
    F32X4Div = 16639745,
    F32X4Min = 16640001,
    F32X4Max = 16640257,
    F32X4Pmin = 16640513,
    F32X4Pmax = 16640769,
    F64X2Abs = 16641025,
    F64X2Neg = 16641281,
    F64X2Sqrt = 16641793,
    F64X2Add = 16642049,
    F64X2Sub = 16642305,
    F64X2Mul = 16642561,
    F64X2Div = 16642817,
    F64X2Min = 16643073,
    F64X2Max = 16643329,
    F64X2Pmin = 16643585,
    F64X2Pmax = 16643841,
    I32X4TruncSatF32X4S = 16644097,
    I32X4TruncSatF32X4U = 16644353,
    F32X4TruncSatI32X4S = 16644609,
    F32X4TruncSatI32X4U = 16644865,
    I32X4TruncSatF64X2SZero = 16645121,
    I32X4TruncSatF64X2UZero = 16645377,
    F64X2ConvertLowI32X4S = 16645633,
    F64X2ConvertLowI32X4U = 16645889,
    MemoryAtomicNotify = 65024,
    MemoryAtomicWait32 = 65025,
    MemoryAtomicWait64 = 65026,
    AtomicFence = 65027,
    I32AtomicLoad = 65040,
    I64AtomicLoad = 65041,
    I32AtomicLoad8U = 65042,
    I32AtomicLoad16U = 65043,
    I64AtomicLoad8U = 65044,
    I64AtomicLoad16U = 65045,
    I64AtomicLoad32U = 65046,
    I32AtomicStore = 65047,
    I64AtomicStore = 65048,
    I32AtomicStore8 = 65049,
    I32AtomicStore16 = 65050,
    I64AtomicStore8 = 65051,
    I64AtomicStore16 = 65052,
    I64AtomicStore32 = 65053,
    I32AtomicRmwAdd = 65054,
    I64AtomicRmwAdd = 65055,
    I32AtomicRmw8AddU = 65056,
    I32AtomicRmw16AddU = 65057,
    I64AtomicRmw8AddU = 65058,
    I64AtomicRmw16AddU = 65059,
    I64AtomicRmw32AddU = 65060,
    I32AtomicRmwSub = 65061,
    I64AtomicRmwSub = 65062,
    I32AtomicRmw8SubU = 65063,
    I32AtomicRmw16SubU = 65064,
    I64AtomicRmw8SubU = 65065,
    I64AtomicRmw16SubU = 65066,
    I64AtomicRmw32SubU = 65067,
    I32AtomicRmwAnd = 65068,
    I64AtomicRmwAnd = 65069,
    I32AtomicRmw8AndU = 65070,
    I32AtomicRmw16AndU = 65071,
    I64AtomicRmw8AndU = 65072,
    I64AtomicRmw16AndU = 65073,
    I64AtomicRmw32AndU = 65074,
    I32AtomicRmwOr = 65075,
    I64AtomicRmwOr = 65076,
    I32AtomicRmw8OrU = 65077,
    I32AtomicRmw16OrU = 65078,
    I64AtomicRmw8OrU = 65079,
    I64AtomicRmw16OrU = 65080,
    I64AtomicRmw32OrU = 65081,
    I32AtomicRmwXor = 65082,
    I64AtomicRmwXor = 65083,
    I32AtomicRmw8XorU = 65084,
    I32AtomicRmw16XorU = 65085,
    I64AtomicRmw8XorU = 65086,
    I64AtomicRmw16XorU = 65087,
    I64AtomicRmw32XorU = 65088,
    I32AtomicRmwXchg = 65089,
    I64AtomicRmwXchg = 65090,
    I32AtomicRmw8XchgU = 65091,
    I32AtomicRmw16XchgU = 65092,
    I64AtomicRmw8XchgU = 65093,
    I64AtomicRmw16XchgU = 65094,
    I64AtomicRmw32XchgU = 65095,
    I32AtomicRmwCmpxchg = 65096,
    I64AtomicRmwCmpxchg = 65097,
    I32AtomicRmw8CmpxchgU = 65098,
    I32AtomicRmw16CmpxchgU = 65099,
    I64AtomicRmw8CmpxchgU = 65100,
    I64AtomicRmw16CmpxchgU = 65101,
    I64AtomicRmw32CmpxchgU = 65102,
}
